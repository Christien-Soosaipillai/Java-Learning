Functional Programing vs Object Oriented Programming

Object Oriented Programming:a model that organizes software design around data, objects, rather than functions
        and logic. An object is defined as a data field that has unique attributes(vars) and behaviours(functions).


Functional Programming: building software composed of pure functions, avoiding shared states, mutable data
        and side-effects. Treats computation as the evaluation of mathematical functions and avoids changing
        states and mutable data. programming is done with expressions or declarations rather than statements.

Lambda Expression: a lambda expression lets you create an anonymous class that implements a specific type of
        interface called a functional interface— which has one and only one abstract method. A lambda expression
        is a concise way to create an anonymous class that implements a functional interface.

Functional Interface: An interface having only 1 abstract method but could contain many default methods

Closure: A closure is a persistent scope which holds on to local variables even after the code execution has moved
        out of that block. Languages which support closure (such as JavaScript, Swift, and Ruby) will allow you to
        keep a reference to a scope (including its parent scopes), even after the block in which those variables were
        declared has finished executing, provided you keep a reference to that block or function somewhere.

Note: "effectively final" is something new introduced in Java SE 8. It is defined as a variable or parameter that
is not declared as final, whose value is never changed after it is initialized.

Steps for creating a lambda expression in java:
    -Step 1: Have OR Create a new interface
    -Step 2: Define your interface such that it matches with the functionality of your lambda expression, for example:

        lambda functionality:
        -void function that takes no arguments and prints a string

        interface:
        interface Foo{
            void bar();
        }
    -Step 3: In the class you wish to use the lambda Declare a variable of the same type(Foo in this case) and have it equal the lamba. We
        must also keep in mind the steps for writing a lambda, for example:

        What we want: Foo greetFunction = () -> System.out.println("Hello World");


        regular method call:      public void perform() {
                                        System.out.println("Hello World");
                                    }
        lambda call: -Step 1: take out the access modifier since its not attached to a class(meaning it is apart of the body of the code and has no effect)
                              =>    void perform() {
                                        System.out.println("Hello World");
                                    }
                     -Step 2: take away the name since we are referring to the function as greetFunction
                              =>    void(){
                                        System.out.println("Hello World");
                                    }
                     -Step 3: take away the return type, the compiler now determines the return type based off the interface, no need to declare twice
                              =>    (){
                                        System.out.println("Hello World");
                                    }
                     -Step 4: add the "->" after the '()' to declare it is a lambda expression
                     -Optional: IFF the lambda is only one line you can declare inline like the example above and not use the "return" keyword. Otherwise, we add
                                the  "{ ...some code... return something; };" after our "() -> "
                              =>   Foo foo = () -> System.out.println("Hello World")

Some more lambda declaration examples:
    addFunction = (int a, int b) -> a + b;

    safeDivide = (int a, int b) -> {
        if(b == 0) { return 0;}
        return a / b;
    }

    stringLength = (String s) -> s.length();


Anonymous Class: an inner class without a name and for which only a single object is created. An anonymous inner class can be
            useful when making an instance of an object with certain “extras” such as overloading methods of a class or interface,
            without having to actually subclass a class. Anonymous inner classes are useful in writing implementation classes
            for listener interfaces in graphics programming.

         syntax is as follows:
            ->Extending a class:   new ParentClass(parameters...) {...}
            eg.LearningMaterial material = new Book("Design Patterns") {
                    @Override
                    public String description() {
                        return "Famous GoF book.";
                    }
                }

            ->Implementing an Interface: new InterfaceName(){...}
            eg.Runnable runnable = new Runnable() {
                    @Override
                    public void run() {
                        ...
                    }
                }